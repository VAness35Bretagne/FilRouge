# -*- coding: utf-8 -*-
"""
Created on Thu Oct 24 10:08:52 2024

@author: Formation
"""

import sys
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QPushButton
import CaseClass as CC 
from PyQt5.QtWidgets import QMessageBox
import compteur as comp
from PyQt5.QtWidgets import QLabel, QVBoxLayout

class Fenetre(QWidget):
    
    def __init__(self, niveau='d√©butant'):
        super().__init__()
      
        self.setWindowTitle(f"Demineur - Niveau {niveau.capitalize()}")
        
        # Cr√©ation du layout principal
        layout_principal = QVBoxLayout()
        
        # Ajoute le label du compteur
        self.label_compteur = QLabel("Temps : 0 s")
        layout_principal.addWidget(self.label_compteur)
        
        self.compteur = comp.Compteur(self.label_compteur)  # Initialisation du compteur
        self.compteur.start()  # D√©marrage du chrono
        
        # Initialisation des attributs
        self.niveau = niveau
        self.grille = None
        self.boutons = []
        self.premier_clic = True  # Attribut pour v√©rifier le premier clic

        # Layout pour la grille des boutons
        self.grid_layout = QGridLayout()
        layout_principal.addLayout(self.grid_layout)  # Ajoute la grille dans le layout principal
        
        self.setLayout(layout_principal)
        
        # Appel initial pour cr√©er la grille
        self.grille = CC.Case(self.niveau)
        self.setup_bouton()  # Cr√©e les boutons, m√™me si ils sont vides au d√©part

        
    def setup_bouton(self):
        """
        Cr√©e et initialise les boutons pour chaque case de la grille du D√©mineur.
    
        Pour chaque cellule de la grille, cette fonction cr√©e un bouton de taille 
        fixe (40x40 pixels) et le place dans une grille d'affichage (QGridLayout). 
        Chaque bouton est connect√© √† la m√©thode `reveler_case`, qui est appel√©e lorsqu'un
        bouton est cliqu√©. Les boutons sont stock√©s dans une liste.
    
        Attributs modifi√©s:
        -------------------
        - self.boutons : Liste contenant les boutons de la grille du D√©mineur.
        - self.grid_layout : Grille d'affichage qui ajoute chaque bouton √† la fen√™tre de jeu.
        
        """
        self.boutons = []
        for i in range(self.grille.lignes):
            row = []
            for j in range(self.grille.colonnes):
                bouton = QPushButton("")  # Cr√©e un bouton vide
                bouton.setFixedSize(40, 40)  # Taille du bouton
                # Connecte le bouton √† une m√©thode qui r√©v√®le la case
                bouton.clicked.connect(lambda _, x=i, y=j: self.reveler_case(x, y))
                self.grid_layout.addWidget(bouton, i, j)  # Ajoute le bouton au layout
                row.append(bouton)
            self.boutons.append(row)
            

    def reveler_case(self, x, y):
        
        """
        R√©v√®le la case sp√©cifi√©e par ses coordonn√©es (x, y) et met √† jour l'affichage.
    
        Lors du premier clic, la fonction g√©n√®re la grille avec des bombes, 
        en veillant √† ne pas en placer autour de la case initialement cliqu√©e.
        Ensuite, la fonction r√©v√®le le contenu de la case cliqu√©e :
        - Si c'est une bombe, elle affiche une ic√¥ne de bombe.
        - Sinon, elle affiche le nombre de mines adjacentes.
        Si la case contient un "0", la fonction appelle r√©cursivement `reveler_case`
        pour r√©v√©ler les cases adjacentes.
    
        Param√®tres:
        -----------
        - x (int) : Coordonn√©e x de la case cliqu√©e (ligne).
        - y (int) : Coordonn√©e y de la case cliqu√©e (colonne).
    
        Attributs modifi√©s:
        -------------------
        - self.grille : Initialis√©e lors du premier clic (si `premier_clic` est True).
        - self.boutons : Mise √† jour de l'affichage du texte des boutons, en fonction
                         du contenu des cases (bombe ou nombre de mines adjacentes).
        """
        
        if self.premier_clic:
            
            self.grille.placer_bombe_aleatoirement((x,y))  # Assure-toi que cette m√©thode ne place pas de bombes autour de (x, y)
            self.grille.calculer_mines_adjacentes()
            
            self.premier_clic = False  # Change l'√©tat apr√®s le premier clic
        
        # V√©rifie si la case est une bombe
        if self.grille.grille[x][y] == -1:
            # R√©v√®le toutes les bombes en appelant la m√©thode All_bombes() de la classe CaseClass
            positions_bombes = self.grille.All_bombes()  # R√©cup√®re la liste des positions des bombes
            for (i, j) in positions_bombes:
                self.boutons[i][j].setText("üí£")  # Affiche une bombe sur les boutons des cases o√π il y a une bombe
            # Affiche un message de d√©faite
            self.afficher_message_defaite()
            
            # Arr√™te le chrono
            self.compteur.stop()
            return

        self.boutons[x][y].setText(str(self.grille.grille[x][y])) #affiche le numero de la case forc√©ment differents de 1
        
        if self.grille.grille[x][y] == 0:
            
            directions = [(-1, -1), (-1, 0), (-1, 1),
                          (0, -1),          (0, 1),
                          (1, -1), (1, 0), (1, 1)]
            
            for dx, dy in directions :
                nx, ny = x + dx, y + dy
                # V√©rifie que nous ne sortons pas des limites de la grille
                if 0 <= nx < self.grille.lignes and 0 <= ny < self.grille.colonnes:
                # R√©v√®le la case adjacente
                    
                    if self.boutons[nx][ny].text() == "":
                        self.reveler_case(nx, ny)  # Appel r√©cursif pour r√©v√©ler les cases adjacentes

    
    def afficher_message_defaite(self):
        """Affiche un message indiquant que la partie est perdue."""
        msg = QMessageBox()
        msg.setWindowTitle("D√©faite")
        msg.setText("Vous avez perdu ! Toutes les bombes ont √©t√© r√©v√©l√©es.")
        msg.setIcon(QMessageBox.Critical)
        msg.exec_()
    
    # def mousePressEvent(self,event):
    #     if event.button() == Qt.LeftButton:
    #         print("appui bouton gauche")
    #         print("position = " + str(event.x()) + " " + str(event.y()))
        
    #     if event.button() == Qt.RightButton:
    #         print("appui bouton droite")
    #         print("position = " + str(event.x()) + " " + str(event.y()))




if __name__ == "__main__":
    app = QApplication(sys.argv)
    fenetre = Fenetre('interm√©diaire')  # Tu peux choisir 'd√©butant', 'interm√©diaire', ou 'difficile'
    fenetre.show()
    sys.exit(app.exec_())